name: Release package

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: ${{ (github.ref_name == 'main') || (github.ref_name == 'master') }}

    steps:
      # Make the content of the repository accessible from a $GITHUB_WORKSPACE variable
      - name: Checkout repository
        uses: actions/checkout@v4

      # Read the content of the package.json file:
      # - Extract the "name" property, which will also be used for archive files name
      # - Extract the "displayName" property if it exists
      # - Remove the "SideXP - " or "com.side-xp" prefix, to get the "clean" name, used for the name of the release
      - name: Read package.json
        id: pkg
        run: |
          PKG_PATH="package.json"
          NAME=$(jq -r .name "$PKG_PATH")
          DISPLAY_NAME=$(jq -r '.displayName // .name' "$PKG_PATH")
          CLEAN_DISPLAY_NAME=$(echo "$DISPLAY_NAME" | sed -E 's/^Side XP - //; s/^com\.side-xp\.//')
          echo "package_name=$NAME" >> $GITHUB_OUTPUT
          echo "package_title=$CLEAN_DISPLAY_NAME" >> $GITHUB_OUTPUT

      # Create a release/package folder that will contain only the "useful" files (exclude .github/, .vscode/, etc.)
      - name: Prepare package folder
        run: |
          mkdir -p release/package
          rsync -a ./ release/package/ \
            --exclude ".git*" \
            --exclude ".github" \
            --exclude ".vscode" \
            --exclude ".vsconfig" \
            --exclude "mkdocs.yml"

      # Create a release/docs folder that will contain the content of the Documentation~/ folder
      - name: Prepare docs folder
        run: |
          mkdir -p release/docs
          cp -a "Documentation~" "release/docs"

      # Create a ZIP archive with the content of the release/package folder
      - name: Output package as ZIP archive
        run: |
          cd release/package
          zip -r ../${{ steps.pkg.outputs.package_name }}.zip ./*
          cd ../..

      # Create a Tarball archive with the content of the release/package folder
      - name: Output package as tarball
        run: |
          tar -czf release/${{ steps.pkg.outputs.package_name }}.tar.gz -C release/package .

      # Create a ZIP archive with the content of the release/docs folder
      - name: Output docs as ZIP archive
        run: |
          cd release/docs
          zip -r ../Documentation.zip ./*
          cd ../..

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        with:
          name: "${{ steps.pkg.outputs.package_title }}_${{github.ref_name}}"
          tag_name: ${{ github.ref_name }}
          files: |
            release/${{ steps.pkg.outputs.package_name }}.zip
            release/${{ steps.pkg.outputs.package_name }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}